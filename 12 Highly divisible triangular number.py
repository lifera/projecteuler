'''

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''


def solution():
    triangle = 0
    i = 1

    while True:
        triangle = (i*(i+1))//2
        i += 1
        divizor_count = 0
        a = 1
        while a * a < triangle:

            if triangle % a == 0:
                divizor_count += 2

            if divizor_count > 500:
                print(triangle)
                return triangle

            a += 1
        if a * a == triangle:
            divizor_count += 1
        if divizor_count > 500:
            print(triangle)
            return triangle

        print(f'triangle = {triangle}, divizor_count = {divizor_count}')


def official_solution():
    #  start with a prime
    n = 3
    # number of divisors for any prime
    Dn=2
    # to insure the while loop is entered
    cnt=0
    primearray = []
    while cnt <= 500:
        n = n+1
        n1 = n
        if n1 % 2 == 0:
            n1 = n1/2
        Dn1 = 1
        for i in range(P):
            if primearray[i]*primearray[i] > n1:
                Dn1=2*Dn1
                break
                # When the prime divisor would be greater than the residual n1, that residual n1 is the last prime factor with an exponent=1 No necessity to identify it.
                exponent=1
                while n1 % primearray[i] == 0:
                    exponent += 1
                    n1 = n1/primearray[i]
                if exponent > 1:
                    Dn1=Dn1*exponent
                if n1 == 1:
                    break
                cnt = Dn*Dn1
                Dn = Dn1
                print (n*(n-1)/2)


def test_solution():
    def Triangle(N, n):
        L = [1] * n
        for i in range(2, n):
            for j in range(i, n, i):
                L[j] += 1

            if i % 2 == 0:
                if L[i // 2] * L[i - 1] > N:
                    return (i - 1) * i // 2
            else:
                if L[i] * L[(i - 1) // 2] > N:
                    return i * (i - 1) // 2

    n = 10 ** 5

    print(Triangle(int(input()), n), n)
test_solution()
# 76576500
